// Create mock functions that will be shared between direct imports and connect() return value
const message = jest.fn();
const messageResult = jest.fn();
const results = jest.fn();
const result = jest.fn();
const dryrun = jest.fn();
const mockCreateDataItemSigner = jest.fn();

jest.mock('@permaweb/aoconnect', () => ({
    // Direct exports
    createDataItemSigner: mockCreateDataItemSigner,
    // connect function that returns the same mock functions
    connect: jest.fn().mockReturnValue({
        message: message,
        messageResult: messageResult,
        results: results,
        result: result,
        dryrun: dryrun,
        createDataItemSigner: mockCreateDataItemSigner
    })
}));

import { DryRunResult } from "@permaweb/aoconnect/dist/lib/dryrun";
import { MessageResult } from "@permaweb/aoconnect/dist/lib/result";
import { DelegationHistorianClient } from "src/clients/pi/historian/DelegationHistorianClient";
import { DelegationHistorianClientError } from "src/clients/pi/historian/DelegationHistorianClientError";
import { DelegationRecord, ProjectDelegationTotal } from "src/clients/pi/historian/abstract/IDelegationHistorianClient";
import { AO_CONFIGURATIONS } from "src/core/ao/ao-client/configurations";

// Mock the logger
jest.mock('src/utils/logger/logger', () => {
    const actualLogger = jest.requireActual('src/utils/logger/logger');
    return {
        ...actualLogger,
        Logger: {
            ...actualLogger.Logger,
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            debug: jest.fn(),
            log: jest.fn(),
        },
    };
});

describe("DelegationHistorianClient", () => {
    let client: DelegationHistorianClient;
    const testProcessId = "test-historian-process-id";
    const testAddress = "test-wallet-address";

    beforeEach(() => {
        // Create a new client using the builder
        client = DelegationHistorianClient.builder()
            .withProcessId(testProcessId)
            .withAOConfig(AO_CONFIGURATIONS.RANDAO)
            .build();
        
        jest.clearAllMocks();
    });

    describe("getDelegationHistory()", () => {
        it("should call dryrun with correct parameters", async () => {
            // Arrange
            const mockHistory: DelegationRecord[] = [
                {
                    from: "wallet1",
                    to: "wallet2",
                    timestamp: 123456789,
                    factor: 0.5
                },
                {
                    from: "wallet3",
                    to: "wallet4",
                    timestamp: 123456790,
                    factor: 0.25
                }
            ];
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockHistory),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getDelegationHistory();

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Get-Delegation-History" }
            ]);
            expect(result).toEqual(mockHistory);
        });

        it("should handle limit parameter", async () => {
            // Arrange
            const limit = 5;
            const mockHistory: DelegationRecord[] = [
                {
                    from: "wallet1",
                    to: "wallet2",
                    timestamp: 123456789,
                    factor: 0.5
                }
            ];
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockHistory),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getDelegationHistory(limit);

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Get-Delegation-History" },
                { name: "Limit", value: limit.toString() }
            ]);
            expect(result).toEqual(mockHistory);
        });

        it("should handle empty response", async () => {
            // Arrange
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify([]),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getDelegationHistory();

            // Assert
            expect(result).toEqual([]);
        });

        it("should throw DelegationHistorianClientError on failure", async () => {
            // Arrange
            const mockError = new Error("API Error");
            dryrun.mockRejectedValueOnce(mockError);

            // Act & Assert
            await expect(client.getDelegationHistory()).rejects.toThrow(DelegationHistorianClientError);
        });
    });

    describe("getDelegationHistoryByAddress()", () => {
        it("should call dryrun with correct parameters", async () => {
            // Arrange
            const mockHistory: DelegationRecord[] = [
                {
                    from: testAddress,
                    to: "wallet2",
                    timestamp: 123456789,
                    factor: 0.5
                }
            ];
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockHistory),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getDelegationHistoryByAddress(testAddress);

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Get-Delegation-History-By-Address" },
                { name: "Address", value: testAddress }
            ]);
            expect(result).toEqual(mockHistory);
        });

        it("should handle limit parameter", async () => {
            // Arrange
            const limit = 5;
            const mockHistory: DelegationRecord[] = [
                {
                    from: testAddress,
                    to: "wallet2",
                    timestamp: 123456789,
                    factor: 0.5
                }
            ];
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockHistory),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getDelegationHistoryByAddress(testAddress, limit);

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Get-Delegation-History-By-Address" },
                { name: "Address", value: testAddress },
                { name: "Limit", value: limit.toString() }
            ]);
            expect(result).toEqual(mockHistory);
        });

        it("should handle empty response", async () => {
            // Arrange
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify([]),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getDelegationHistoryByAddress(testAddress);

            // Assert
            expect(result).toEqual([]);
        });

        it("should throw DelegationHistorianClientError on failure", async () => {
            // Arrange
            const mockError = new Error("API Error");
            dryrun.mockRejectedValueOnce(mockError);

            // Act & Assert
            await expect(client.getDelegationHistoryByAddress(testAddress)).rejects.toThrow(DelegationHistorianClientError);
        });
    });

    describe("getTotalDelegated()", () => {
        it("should call dryrun with correct parameters", async () => {
            // Arrange
            const mockTotal: ProjectDelegationTotal[] = [
                {
                    project: "project1",
                    total: 100
                },
                {
                    project: "project2",
                    total: 200
                }
            ];
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockTotal),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getTotalDelegated();

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Get-Total-Delegated" }
            ]);
            expect(result).toEqual(mockTotal);
        });

        it("should handle empty response", async () => {
            // Arrange
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify([]),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getTotalDelegated();

            // Assert
            expect(result).toEqual([]);
        });

        it("should throw DelegationHistorianClientError on failure", async () => {
            // Arrange
            const mockError = new Error("API Error");
            dryrun.mockRejectedValueOnce(mockError);

            // Act & Assert
            await expect(client.getTotalDelegated()).rejects.toThrow(DelegationHistorianClientError);
        });
    });
});
