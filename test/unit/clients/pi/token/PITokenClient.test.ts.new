// Create mock functions that will be shared between direct imports and connect() return value
const message = jest.fn();
const messageResult = jest.fn();
const results = jest.fn();
const result = jest.fn();
const dryrun = jest.fn();
const mockCreateDataItemSigner = jest.fn();

jest.mock('@permaweb/aoconnect', () => ({
    // Direct exports
    createDataItemSigner: mockCreateDataItemSigner,
    // connect function that returns the same mock functions
    connect: jest.fn().mockReturnValue({
        message: message,
        messageResult: messageResult,
        results: results,
        result: result,
        dryrun: dryrun,
        createDataItemSigner: mockCreateDataItemSigner
    })
}));

import { DryRunResult } from "@permaweb/aoconnect/dist/lib/dryrun";
import { MessageResult } from "@permaweb/aoconnect/dist/lib/result";
import { PITokenClient } from "src/clients/pi/PIToken/PITokenClient";
import { PITokenClientError } from "src/clients/pi/PIToken/PITokenClientError";
import { TokenInfo, TokenBalance, TickData } from "src/clients/pi/PIToken/abstract/IPITokenClient";
import { AO_CONFIGURATIONS } from "src/core/ao/ao-client/configurations";

// Mock the logger
jest.mock('src/utils/logger/logger', () => {
    const actualLogger = jest.requireActual('src/utils/logger/logger');
    return {
        ...actualLogger,
        Logger: {
            ...actualLogger.Logger,
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            debug: jest.fn(),
            log: jest.fn(),
        },
    };
});

describe("PITokenClient", () => {
    let client: PITokenClient;
    const testProcessId = "test-pi-token-process-id";
    const testWalletAddress = "test-wallet-address";
    const testTickerSymbol = "TEST";

    beforeEach(() => {
        // Create a new client using the builder
        client = PITokenClient.builder()
            .withProcessId(testProcessId)
            .withAOConfig(AO_CONFIGURATIONS.RANDAO)
            .build();
        
        jest.clearAllMocks();
    });

    describe("getInfo()", () => {
        it("should call dryrun with correct parameters", async () => {
            // Arrange
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify({
                            type: "pi-token",
                            version: "1.0"
                        }),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getInfo();

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Info" }
            ]);
            expect(result).toBe(mockResponse);
        });

        it("should throw PITokenClientError on failure", async () => {
            // Arrange
            const mockError = new Error("API Error");
            dryrun.mockRejectedValueOnce(mockError);

            // Act & Assert
            await expect(client.getInfo()).rejects.toThrow(PITokenClientError);
        });
    });

    describe("getTokenInfo()", () => {
        it("should call dryrun with correct parameters and parse the response", async () => {
            // Arrange
            const mockTokenInfo: TokenInfo = {
                ticker: testTickerSymbol,
                name: "Test Token",
                owner: "owner-address",
                totalSupply: 1000000
            };
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockTokenInfo),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getTokenInfo();

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Token-Info" }
            ]);
            expect(result).toEqual(mockTokenInfo);
        });

        it("should throw PITokenClientError on failure", async () => {
            // Arrange
            const mockError = new Error("API Error");
            dryrun.mockRejectedValueOnce(mockError);

            // Act & Assert
            await expect(client.getTokenInfo()).rejects.toThrow(PITokenClientError);
        });
    });

    describe("getBalance()", () => {
        it("should call dryrun with correct parameters for a wallet", async () => {
            // Arrange
            const mockBalance: TokenBalance = {
                owner: testWalletAddress,
                ticker: testTickerSymbol,
                balance: 500
            };
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockBalance),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getBalance(testWalletAddress);

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Balance" },
                { name: "Target", value: testWalletAddress }
            ]);
            expect(result).toEqual(mockBalance);
        });

        it("should use default wallet address when none is provided", async () => {
            // Arrange
            const mockBalance: TokenBalance = {
                owner: "default-wallet",
                ticker: testTickerSymbol,
                balance: 100
            };
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockBalance),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getBalance();

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Balance" }
            ]);
            expect(result).toEqual(mockBalance);
        });

        it("should throw PITokenClientError on failure", async () => {
            // Arrange
            const mockError = new Error("API Error");
            dryrun.mockRejectedValueOnce(mockError);

            // Act & Assert
            await expect(client.getBalance(testWalletAddress)).rejects.toThrow(PITokenClientError);
        });
    });

    describe("getTickHistory()", () => {
        it("should call dryrun with correct parameters", async () => {
            // Arrange
            const mockTickHistory: TickData[] = [
                {
                    timestamp: 1633027200,
                    price: 1.23
                },
                {
                    timestamp: 1633113600,
                    price: 1.25
                }
            ];
            
            const mockResponse: DryRunResult = {
                Messages: [
                    {
                        Data: JSON.stringify(mockTickHistory),
                        Tags: []
                    }
                ],
                Output: null,
                Spawns: []
            };
            dryrun.mockResolvedValueOnce(mockResponse);

            // Act
            const result = await client.getTickHistory();

            // Assert
            expect(dryrun).toHaveBeenCalledWith('', [
                { name: "Action", value: "Tick-History" }
            ]);
            expect(result).toEqual(mockTickHistory);
        });

        it("should throw PITokenClientError on failure", async () => {
            // Arrange
            const mockError = new Error("API Error");
            dryrun.mockRejectedValueOnce(mockError);

            // Act & Assert
            await expect(client.getTickHistory()).rejects.toThrow(PITokenClientError);
        });
    });
});
