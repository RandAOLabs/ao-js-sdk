import { jest } from '@jest/globals';
import { PIService } from 'src/services/pi/PIService';
import { PIOracleClient } from 'src/clients/pi/oracle/PIOracleClient';
import { PIDelegateClient } from 'src/clients/pi/delegate/PIDelegateClient';
import { DelegationHistorianClient } from 'src/clients/pi/historian/DelegationHistorianClient';
import { PIDataAggregator } from 'src/services/pi/PIDataAggregator';
import { PIToken } from 'src/clients/pi/oracle/abstract/types';
import { DelegationPreference } from 'src/clients/pi/delegate/abstract/IPIDelegateClient';
import { DelegationRecord, ProjectDelegationTotal } from 'src/clients/pi/historian/abstract/IDelegationHistorianClient';

// Mock the client classes
jest.mock('src/clients/pi/oracle/PIOracleClient');
jest.mock('src/clients/pi/delegate/PIDelegateClient');
jest.mock('src/clients/pi/historian/DelegationHistorianClient');
jest.mock('src/services/pi/PIDataAggregator');

describe('PIService', () => {
    let service: PIService;
    let mockOracleClient: jest.Mocked<PIOracleClient>;
    let mockDelegateClient: jest.Mocked<PIDelegateClient>;
    let mockHistorianClient: jest.Mocked<DelegationHistorianClient>;
    let mockDataAggregator: jest.Mocked<PIDataAggregator>;

    const testWalletAddress = 'test-wallet-address';
    const testTokens: PIToken[] = [
        { 
            ticker: 'TK1', 
            name: 'Token 1',
            owner: 'owner1',
            totalSupply: 1000,
            processId: 'process1',
            specificProcessId: 'specific1',
            delegationProcessId: 'delegate1'
        },
        { 
            ticker: 'TK2', 
            name: 'Token 2',
            owner: 'owner2',
            totalSupply: 2000,
            processId: 'process2',
            specificProcessId: 'specific2',
            delegationProcessId: 'delegate2'
        }
    ];

    const testDelegationPreference: DelegationPreference = {
        walletFrom: testWalletAddress,
        walletTo: 'recipient-address',
        factor: 0.5
    };

    const testDelegationHistory: DelegationRecord[] = [
        {
            from: testWalletAddress,
            to: 'wallet2',
            timestamp: 123456789,
            factor: 0.5
        }
    ];

    const testTotalDelegated: ProjectDelegationTotal[] = [
        {
            project: 'project1',
            total: 100
        }
    ];

    beforeEach(() => {
        // Reset mocks
        jest.clearAllMocks();

        // Set up mock objects
        mockOracleClient = PIOracleClient.builder().build() as jest.Mocked<PIOracleClient>;
        mockDelegateClient = PIDelegateClient.builder().build() as jest.Mocked<PIDelegateClient>;
        mockHistorianClient = DelegationHistorianClient.builder().build() as jest.Mocked<PIDelegateClient>;
        mockDataAggregator = new PIDataAggregator() as jest.Mocked<PIDataAggregator>;

        // Setup default mock behaviors
        (mockOracleClient.getPITokens as jest.Mock).mockResolvedValue(testTokens);
        (mockDelegateClient.getDelegation as jest.Mock).mockResolvedValue(JSON.stringify(testDelegationPreference));
        (mockHistorianClient.getDelegationHistory as jest.Mock).mockResolvedValue(testDelegationHistory);
        (mockHistorianClient.getTotalDelegated as jest.Mock).mockResolvedValue(testTotalDelegated);
        
        // Create the service with mocked dependencies
        service = new PIService();
        
        // Replace the service's clients with our mocks
        Object.defineProperty(service, 'oracleClient', { value: mockOracleClient });
        Object.defineProperty(service, 'delegateClient', { value: mockDelegateClient });
        Object.defineProperty(service, 'historianClient', { value: mockHistorianClient });
        Object.defineProperty(service, 'dataAggregator', { value: mockDataAggregator });
    });

    describe('getAllPITokens', () => {
        it('should return all PI tokens with extended information', async () => {
            // Act
            const result = await service.getAllPITokens();

            // Assert
            expect(mockOracleClient.getPITokens).toHaveBeenCalled();
            expect(result).toEqual(expect.arrayContaining(testTokens));
        });

        it('should handle empty token list', async () => {
            // Arrange
            (mockOracleClient.getPITokens as jest.Mock).mockResolvedValue([]);

            // Act
            const result = await service.getAllPITokens();

            // Assert
            expect(result).toEqual([]);
        });
    });

    describe('getUserDelegations', () => {
        it('should get delegation data for a wallet', async () => {
            // Act
            const result = await service.getUserDelegations(testWalletAddress);

            // Assert
            expect(mockDelegateClient.getDelegation).toHaveBeenCalledWith(testWalletAddress);
            expect(result).toEqual(testDelegationPreference);
        });

        it('should handle null delegation response', async () => {
            // Arrange
            (mockDelegateClient.getDelegation as jest.Mock).mockResolvedValue(undefined);

            // Act
            const result = await service.getUserDelegations(testWalletAddress);

            // Assert
            expect(result).toBeNull();
        });
    });

    describe('getDelegationHistory', () => {
        it('should get delegation history', async () => {
            // Act
            const result = await service.getDelegationHistory();

            // Assert
            expect(mockHistorianClient.getDelegationHistory).toHaveBeenCalled();
            expect(result).toEqual(testDelegationHistory);
        });

        it('should pass limit parameter', async () => {
            // Arrange
            const limit = 5;
            
            // Act
            await service.getDelegationHistory(limit);

            // Assert
            expect(mockHistorianClient.getDelegationHistory).toHaveBeenCalledWith(limit);
        });
    });

    describe('getDelegationHistoryByAddress', () => {
        it('should get delegation history for an address', async () => {
            // Act
            const result = await service.getDelegationHistoryByAddress(testWalletAddress);

            // Assert
            expect(mockHistorianClient.getDelegationHistoryByAddress).toHaveBeenCalledWith(testWalletAddress);
            expect(result).toEqual(testDelegationHistory);
        });

        it('should pass limit parameter', async () => {
            // Arrange
            const limit = 5;
            
            // Act
            await service.getDelegationHistoryByAddress(testWalletAddress, limit);

            // Assert
            expect(mockHistorianClient.getDelegationHistoryByAddress).toHaveBeenCalledWith(testWalletAddress, limit);
        });
    });

    describe('getTotalDelegated', () => {
        it('should get total delegated information', async () => {
            // Act
            const result = await service.getTotalDelegated();

            // Assert
            expect(mockHistorianClient.getTotalDelegated).toHaveBeenCalled();
            expect(result).toEqual(testTotalDelegated);
        });
    });

    describe('setDelegationPreference', () => {
        it('should set delegation preference', async () => {
            // Arrange
            const expectedResult = { id: 'message-id' };
            (mockDelegateClient.setDelegation as jest.Mock).mockResolvedValue(expectedResult);

            // Act
            const result = await service.setDelegationPreference(testDelegationPreference);

            // Assert
            expect(mockDelegateClient.setDelegation).toHaveBeenCalledWith(testDelegationPreference);
            expect(result).toEqual(expectedResult);
        });
    });
});
